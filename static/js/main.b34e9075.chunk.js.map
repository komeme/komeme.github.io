{"version":3,"sources":["components/organisms/header.tsx","components/templates/base-page.tsx","components/pages/home-page.tsx","components/pages/portfolio-page.tsx","components/pages/contact-page.tsx","components/pages/not-found-page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","title","display","breakpoints","up","link","color","textDecoration","margin","spacing","Header","classes","AppBar","position","Toolbar","Typography","variant","className","Link","component","RouterLink","to","BasePage","children","HomePage","PortfolioPage","ContactPage","NotFoundPage","App","basename","process","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAKMA,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,MAAM,aACFD,SAAU,EACVE,QAAS,QACRL,EAAMM,YAAYC,GAAG,MAAQ,CAC1BF,QAAS,UAGjBG,KAAM,CACFC,MAAO,OACPC,eAAgB,OAChBC,OAAQX,EAAMY,QAAQ,EAAG,WAKxBC,EAAmB,WAE5B,IAAMC,EAAUhB,IAEhB,OACI,kBAACiB,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWN,EAAQV,OAA5C,6BAIA,kBAACc,EAAA,EAAD,KACI,6BACI,kBAACG,EAAA,EAAD,CAAOC,UAAWC,IAAYC,GAAG,aAAaf,MAAM,UAAUW,UAAWN,EAAQN,MAAjF,aAIA,kBAACa,EAAA,EAAD,CAAMC,UAAWC,IAAYC,GAAG,WAAWf,MAAM,UAAUW,UAAWN,EAAQN,MAA9E,gBCxCXiB,EAAqB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAChC,OAAQ,6BACJ,kBAAC,EAAD,MACCA,ICHIC,EAAqB,kBAC9B,kBAAC,EAAD,cCDSC,EAA0B,kBACnC,kBAAC,EAAD,mBCDSC,EAAwB,kBACjC,kBAAC,EAAD,iBCDSC,EAAyB,kBAClC,kBAAC,EAAD,mBCiBWC,MAbf,WACI,OACI,kBAAC,IAAD,CAAYC,SAAQ,UAAKC,KACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,aAAaZ,UAAWM,IACpC,kBAAC,IAAD,CAAOM,KAAK,WAAWZ,UAAWO,IAClC,kBAAC,IAAD,CAAOK,KAAK,IAAIZ,UAAWK,IAC3B,kBAAC,IAAD,CAAOL,UAAWQ,OCHdK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b34e9075.chunk.js","sourcesContent":["import {AppBar, Toolbar, Typography,  Link} from \"@material-ui/core\";\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\nimport {Link as RouterLink} from 'react-router-dom'\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        title: {\n            flexGrow: 1,\n            display: 'none',\n            [theme.breakpoints.up('sm')]: {\n                display: 'block',\n            },\n        },\n        link: {\n            color: '#FFF',\n            textDecoration: 'none',\n            margin: theme.spacing(1, 1.5),\n        }\n    }),\n);\n\nexport const Header: React.FC = () => {\n\n    const classes = useStyles();\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n\n                <Typography variant=\"h6\" className={classes.title} >\n                    Comeme's Official Website\n                </Typography>\n\n                <Typography>\n                    <nav>\n                        <Link  component={RouterLink} to=\"/portfolio\" color=\"inherit\" className={classes.link}>\n                            Portfolio\n                        </Link>\n\n                        <Link component={RouterLink} to=\"/contact\" color=\"inherit\" className={classes.link}>\n                            Contact\n                        </Link>\n                    </nav>\n                </Typography>\n\n            </Toolbar>\n        </AppBar>\n    );\n}","import React from 'react';\nimport {Header} from \"../organisms/header\";\n\nexport const BasePage: React.FC = ({children}) => {\n    return (<div>\n        <Header/>\n        {children}\n    </div>)\n};","import React from 'react';\nimport {BasePage} from \"../templates/base-page\";\n\nexport const HomePage: React.FC = () => (\n    <BasePage>\n        HOME\n    </BasePage>\n);\n\n","import React from 'react'\nimport {BasePage} from \"../templates/base-page\";\n\nexport const PortfolioPage: React.FC = () => (\n    <BasePage>\n        Portfolio\n    </BasePage>\n);","import React from 'react'\nimport {BasePage} from \"../templates/base-page\";\n\nexport const ContactPage: React.FC = () => (\n    <BasePage>\n        Contact\n    </BasePage>\n);","import React from 'react'\nimport {BasePage} from \"../templates/base-page\";\n\nexport const NotFoundPage: React.FC = () => (\n    <BasePage>\n        Not Found\n    </BasePage>\n);","import React from 'react';\nimport './App.css';\nimport {Switch, Route, HashRouter} from 'react-router-dom'\nimport {HomePage} from \"./components/pages/home-page\";\nimport {PortfolioPage} from \"./components/pages/portfolio-page\";\nimport {ContactPage} from \"./components/pages/contact-page\";\nimport {NotFoundPage} from \"./components/pages/not-found-page\";\n\nfunction App() {\n    return (\n        <HashRouter basename={`${process.env.PUBLIC_URL}`}>\n            <Switch>\n                <Route path=\"/portfolio\" component={PortfolioPage}/>\n                <Route path=\"/contact\" component={ContactPage}/>\n                <Route path=\"/\" component={HomePage}/>\n                <Route component={NotFoundPage} />\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}