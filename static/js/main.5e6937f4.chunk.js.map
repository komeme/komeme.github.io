{"version":3,"sources":["components/organisms/header.tsx","components/organisms/menu.tsx","components/templates/base-page.tsx","components/pages/home-page.tsx","components/pages/portfolio-page.tsx","components/pages/contact-page.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","AppBar","position","Toolbar","IconButton","edge","color","onClick","onClickMenuIcon","Typography","component","variant","noWrap","Menu","Drawer","open","onClose","Divider","List","ListItem","button","to","ListItemText","primary","BasePage","children","useState","isMenuOpen","setIsMenuOpen","HomePage","PortfolioPage","ContactPage","App","basename","process","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAQaA,EAAgC,SAAAC,GAAK,OAC9C,kBAACC,EAAA,EAAD,CAAQC,SAAS,YACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,KAAK,QACLC,MAAM,WAEN,kBAAC,IAAD,CAAUC,QAASP,EAAMQ,mBAE7B,kBAACC,EAAA,EAAD,CAAYC,UAAU,KAAKC,QAAQ,KAAKL,MAAM,UAAUM,QAAM,GAA9D,iC,yDCRCC,EAA4B,SAAAb,GAAK,OAC1C,kBAACc,EAAA,EAAD,CACIH,QAAQ,YACRI,MAAI,GAEJ,6BACI,kBAACX,EAAA,EAAD,CAAYG,QAASP,EAAMgB,SACvB,kBAAC,IAAD,QAGR,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAAC,IAAD,CAAMC,GAAG,SACL,kBAACC,EAAA,EAAD,CAAcC,QAAQ,eAG9B,kBAACJ,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAAC,IAAD,CAAMC,GAAG,cACL,kBAACC,EAAA,EAAD,CAAcC,QAAQ,oBAG9B,kBAACJ,EAAA,EAAD,CAAUC,QAAM,GACZ,kBAAC,IAAD,CAAMC,GAAG,YACL,kBAACC,EAAA,EAAD,CAAcC,QAAQ,iBC7B7BC,EAAqB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EAEVC,oBAAkB,GAFR,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAI9C,OAAQ,6BACJ,kBAAC,EAAD,CAAQpB,gBAAiB,kBAAMoB,GAAc,MAC5CD,GAAc,kBAAC,EAAD,CAAMX,QAAS,kBAAMY,GAAc,MAClD,6BACKH,KCTAI,EAAqB,kBAC9B,kBAAC,EAAD,cCDSC,EAA0B,kBACnC,kBAAC,EAAD,mBCDSC,EAAwB,kBACjC,kBAAC,EAAD,iBCqBWC,MAlBf,WACI,OACI,kBAAC,IAAD,CAAYC,SAAQ,UAAKC,KACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,cACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,IACR,kBAAC,EAAD,UCNAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e6937f4.chunk.js","sourcesContent":["import {AppBar, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport React from \"react\";\n\ntype HeaderProps = {\n    onClickMenuIcon: () => void\n}\n\nexport const Header: React.FC<HeaderProps> = props => (\n    <AppBar position=\"absolute\">\n        <Toolbar>\n            <IconButton\n                edge=\"start\"\n                color=\"inherit\"\n            >\n                <MenuIcon onClick={props.onClickMenuIcon}/>\n            </IconButton>\n            <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap>\n                Comeme's Official Web Site\n            </Typography>\n        </Toolbar>\n    </AppBar>\n);","import {Divider, Drawer, IconButton, List, ListItem, ListItemText} from \"@material-ui/core\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport {Link} from \"react-router-dom\";\nimport React from \"react\";\n\ntype MenuProps = {\n    onClose: () => void\n}\n\nexport const Menu: React.FC<MenuProps> = props => (\n    <Drawer\n        variant=\"permanent\"\n        open\n    >\n        <div>\n            <IconButton onClick={props.onClose}>\n                <ChevronLeftIcon />\n            </IconButton>\n        </div>\n        <Divider />\n        <List>\n            <ListItem button>\n                <Link to=\"/home\">\n                    <ListItemText primary=\"HomePage\" />\n                </Link>\n            </ListItem>\n            <ListItem button>\n                <Link to=\"/portfolio\">\n                    <ListItemText primary=\"PortfolioPage\" />\n                </Link>\n            </ListItem>\n            <ListItem button>\n                <Link to=\"/contact\">\n                    <ListItemText primary=\"contact\" />\n                </Link>\n            </ListItem>\n        </List>\n    </Drawer>\n);","import React, {useState} from 'react';\nimport {Header} from \"../organisms/header\";\nimport {Menu} from \"../organisms/menu\";\n\nexport const BasePage: React.FC = ({children}) => {\n\n    const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false);\n\n    return (<div>\n        <Header onClickMenuIcon={() => setIsMenuOpen(true)}/>\n        {isMenuOpen && <Menu onClose={() => setIsMenuOpen(false)}/>}\n        <div>\n            {children}\n        </div>\n    </div>)\n};","import React from 'react';\nimport {BasePage} from \"../templates/base-page\";\n\nexport const HomePage: React.FC = () => (\n    <BasePage>\n        HOME\n    </BasePage>\n);\n\n","import React from 'react'\nimport {BasePage} from \"../templates/base-page\";\n\nexport const PortfolioPage: React.FC = () => (\n    <BasePage>\n        Portfolio\n    </BasePage>\n);","import React from 'react'\nimport {BasePage} from \"../templates/base-page\";\n\nexport const ContactPage: React.FC = () => (\n    <BasePage>\n        Contact\n    </BasePage>\n);","import React from 'react';\nimport './App.css';\nimport {Switch, Route, HashRouter} from 'react-router-dom'\nimport {HomePage} from \"./components/pages/home-page\";\nimport {PortfolioPage} from \"./components/pages/portfolio-page\";\nimport {ContactPage} from \"./components/pages/contact-page\";\n\nfunction App() {\n    return (\n        <HashRouter basename={`${process.env.PUBLIC_URL}`}>\n            <Switch>\n                <Route path=\"/portfolio\">\n                    <PortfolioPage/>\n                </Route>\n                <Route path=\"/contact\">\n                    <ContactPage/>\n                </Route>\n                <Route path=\"\">\n                    <HomePage/>\n                </Route>\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}